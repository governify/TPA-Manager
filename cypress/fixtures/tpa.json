{
    "id": "tpa-test-project-with-tpa",
    "templateId": "template-test-project",
    "version": "1.0.0",
    "type": "agreement",
    "context": {
        "validity": {
            "initial": "2022-01-01",
            "timeZone": "America/Los_Angeles"
        },
        "definitions": {
            "schemas": {},
            "scopes": {
                "development": {
                    "project": {
                        "name": "Project",
                        "description": "Project",
                        "type": "string",
                        "default": "test-project-with-tpa"
                    },
                    "class": {
                        "name": "Class",
                        "description": "Group some Projects",
                        "type": "string",
                        "default": "test-course"
                    },
                    "member": {
                        "name": "Member",
                        "description": "Member",
                        "type": "string",
                        "default": "*"
                    }
                }
            },
            "collectors": {
                "eventcollector": {
                    "infrastructurePath": "internal.collector.events",
                    "endpoint": "/api/v2/computations",
                    "type": "POST-GET-V1",
                    "config": {
                        "scopeManager": "http://host.docker.internal:5700/api/v1/scopes/development"
                    }
                }
            },
            "dashboards": {
                "main": {
                    "base": "http://host.docker.internal:5200/api/v1/public/grafana-dashboards/tpa/base.json",
                    "modifier": "http://host.docker.internal:5200/api/v1/public/grafana-dashboards/tpa/modifier.js",
                    "overlay": "http://host.docker.internal:5200/api/v1/public/grafana-dashboards/tpa/overlay.js",
                    "config": {
                        "configDashboard": true,
                        "blocks": {
                            "2": {
                                "type": "gauge-period-time-correlation-notZero-member",
                                "guarantee": "CORRELATION_COUNTPRSWITHATLEASTONECOMMENTORONEREVIEWCOMMENTBYMEMBER_AND_COUNTPR",
                                "config": {
                                    "scope-class": "test-course",
                                    "x-axis-metric": "metric_COUNT_PR",
                                    "y-axis-metric": "metric_COUNT_PRS_WITH_AT_LEAST_ONE_COMMENT_OR_ONE_REVIEW_COMMENT_BY_MEMBER",
                                    "not-zero-metric": "metric_COUNT_PR",
                                    "time-graph-title": "Percentage of correlation between GH approved PR/merged PR"
                                }
                            }
                        }
                    }
                }
            },
            "notifications": {}
        },
        "infrastructure": {}
    },
    "terms": {
        "metrics": {
            "COUNT_PRS_WITH_AT_LEAST_ONE_COMMENT_OR_ONE_REVIEW_COMMENT_BY_MEMBER": {
                "collector": {
                    "infrastructurePath": "internal.collector.events",
                    "endpoint": "/api/v2/computations",
                    "type": "POST-GET-V1",
                    "config": {
                        "scopeManager": "http://host.docker.internal:5700/api/v1/scopes/development"
                    }
                },
                "measure": {
                    "computing": "actual",
                    "element": "number",
                    "event": {
                        "githubGQL": {
                            "custom": {
                                "type": "graphQL",
                                "title": "Get pull requests with at least one comment by member",
                                "steps": {
                                    "0": {
                                        "type": "queryGetObject",
                                        "query": "{\r\n  repository(name: \"%PROJECT.github.repository%\", owner: \"%PROJECT.github.repoOwner%\") {\r\n    pullRequests(first: 100) {\r\n      pageInfo {\r\n        endCursor\r\n        hasNextPage\r\n      }\r\n      nodes {\r\n        bodyText\r\n        number\r\n        state\r\n        createdAt\r\n        author {\r\n          login\r\n        }\r\n        mergedAt\r\n        mergedBy {\r\n          login\r\n        }\r\n        comments(first: 50) {\r\n          nodes {\r\n            author {\r\n              login\r\n            }\r\n            bodyText\r\n            createdAt\r\n          }\r\n        }\r\n        reviews(first: 30) {\r\n          nodes {\r\n            state\r\n            createdAt\r\n            bodyText\r\n            author {\r\n              login\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
                                    },
                                    "1": {
                                        "type": "objectGetSubObjects",
                                        "location": "data.repository.pullRequests.nodes"
                                    },
                                    "2": {
                                        "type": "runScript",
                                        "variables": {},
                                        "script": "module.exports.generic = function getPullRequestsWithAtLeastOneCommentByMember(inputData,variables)  {\r\n    let pullRequestsMergedAndOpenWithAtLeastOneComment = []\r\n    for (let pullRequest of inputData) {\r\n\r\n        if (pullRequest.bodyText.length > 0 && pullRequest.author.login === '%MEMBER.github.username%' && new Date(pullRequest.createdAt) > new Date(variables.from) && new Date(pullRequest.createdAt) < new Date(variables.to)) {\r\n            pullRequestsMergedAndOpenWithAtLeastOneComment.push(pullRequest)\r\n            continue;\r\n        }\r\n        \r\n        let isPullRequestAlreadyAdded = false;\r\n\r\n        if (pullRequest.state === 'OPEN' || pullRequest.state === 'MERGED' && new Date(pullRequest.mergedAt) > new Date(variables.from) && new Date(pullRequest.mergedAt) < new Date(variables.to)) {\r\n            for (let comment of pullRequest.comments.nodes) {\r\n                if (comment.author.login === '%MEMBER.github.username%' && new Date(comment.createdAt) > new Date(variables.from) && new Date(comment.createdAt) < new Date(variables.to)) {\r\n                    pullRequestsMergedAndOpenWithAtLeastOneComment.push(pullRequest)\r\n                    isPullRequestAlreadyAdded = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (isPullRequestAlreadyAdded) continue;\r\n\r\n            for (let review of pullRequest.reviews.nodes) {\r\n                if (review.bodyText.length > 0 && review.author.login === '%MEMBER.github.username%' && new Date(review.createdAt) > new Date(variables.from) && new Date(review.createdAt) < new Date(variables.to)) {\r\n                    pullRequestsMergedAndOpenWithAtLeastOneComment.push(pullRequest)\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return pullRequestsMergedAndOpenWithAtLeastOneComment;\r\n}"
                                    }
                                }
                            }
                        }
                    },
                    "scope": {
                        "project": {
                            "name": "Project",
                            "description": "Project",
                            "type": "string",
                            "default": "test-project-with-tpa"
                        },
                        "class": {
                            "name": "Class",
                            "description": "Group some Projects",
                            "type": "string",
                            "default": "test-course"
                        }
                    }
                }
            },
            "COUNT_PR": {
                "collector": {
                    "infrastructurePath": "internal.collector.events",
                    "endpoint": "/api/v2/computations",
                    "type": "POST-GET-V1",
                    "config": {
                        "scopeManager": "http://host.docker.internal:5700/api/v1/scopes/development"
                    }
                },
                "measure": {
                    "computing": "actual",
                    "element": "number",
                    "event": {
                        "githubGQL": {
                            "custom": {
                                "type": "graphQL",
                                "title": "Get pull request",
                                "steps": {
                                    "0": {
                                        "type": "queryGetObject",
                                        "query": "{\r\n  repository(name: \"%PROJECT.github.repository%\", owner: \"%PROJECT.github.repoOwner%\") {\r\n    pullRequests(first: 100) {\r\n      nodes {\r\n        number\r\n        title\r\n        bodyText\r\n        state\r\n        createdAt\r\n        author {\r\n          login\r\n        }\r\n        mergedAt\r\n        mergedBy {\r\n          login\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
                                    },
                                    "1": {
                                        "type": "objectGetSubObjects",
                                        "location": "data.repository.pullRequests.nodes"
                                    },
                                    "2": {
                                        "type": "runScript",
                                        "variables": {},
                                        "script": "module.exports.generic = function getPullRequests(inputData,variables)  {\r\n    return inputData.filter(pullRequest => {\r\n        \r\n        if (pullRequest.state === 'OPEN' || pullRequest.state === 'MERGED' && Math.max(new Date(variables.from), new Date(pullRequest.createdAt)) <= Math.min(new Date(variables.to), new Date(pullRequest.mergedAt))) {\r\n            return pullRequest;\r\n        }\r\n    })\r\n}"
                                    }
                                }
                            }
                        }
                    },
                    "scope": {
                        "project": {
                            "name": "Project",
                            "description": "Project",
                            "type": "string",
                            "default": "test-project-with-tpa"
                        },
                        "class": {
                            "name": "Class",
                            "description": "Group some Projects",
                            "type": "string",
                            "default": "test-course"
                        }
                    }
                }
            }
        },
        "guarantees": [
            {
                "id": "CORRELATION_COUNTPRSWITHATLEASTONECOMMENTORONEREVIEWCOMMENTBYMEMBER_AND_COUNTPR",
                "notes": "#### Description\r\n```\r\nTP-1: At least 1 done issue every week.",
                "description": "The percentage of the number of approved and merged pull requests with respect to the number of merged pull requests must be greater than 75%",
                "scope": {
                    "project": {
                        "name": "Project",
                        "description": "Project",
                        "type": "string",
                        "default": "test-project-with-tpa"
                    },
                    "class": {
                        "name": "Class",
                        "description": "Group some Projects",
                        "type": "string",
                        "default": "test-course"
                    },
                    "member": "*"
                },
                "of": [
                    {
                        "scope": {
                            "project": "test-project-with-tpa",
                            "member": "*"
                        },
                        "objective": "COUNT_PRS_WITH_AT_LEAST_ONE_COMMENT_OR_ONE_REVIEW_COMMENT_BY_MEMBER/COUNT_PR*100 >= 75",
                        "with": {
                            "COUNT_PRS_WITH_AT_LEAST_ONE_COMMENT_OR_ONE_REVIEW_COMMENT_BY_MEMBER": {},
                            "COUNT_PR": {}
                        },
                        "window": {
                            "type": "static",
                            "period": "weekly",
                            "initial": "2023-01-01"
                        }
                    }
                ]
            }
        ]
    },
    "__v": 0
}